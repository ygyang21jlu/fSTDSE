Last updated: 2015 July 28
------------

Input keywords

  All input keywords are collected in sph_tdse namelist, which should be prepared
  using the usual Fortran rules. The keywords, in alphabetical order, are listed
  below; the source file defining the keyword is given in parentheses. The source
  should be consulted for further information. The default value for each keyword
  is given following the equals sign.

  BICG_EPSILON=0 (bicg_tools.f90)
    Relative accuracy required from bi-CG iterative linear solver (used in the
    laser-field propagator). Zero value (the default) will use smaller of 1e-12 
    and spacing(1._rk). Note that bicg_epsilon values greater than 1e-12 will 
    likely produce incorrect results. Single-precision builds may experience
    problems converging to the default accuracy.

  BICG_FAILTRACE=.true. (bicg_tools.f90)
    Produce a verbose report when iterative solution fails. The default value
    of .true. will (very slightly) increase the execution time.

  BICG_MAXITER=8 (bicg_tools.f90)
    Maximum number of iterations and restarts of bi-CG solver. if bi-CG iterations 
    fail to converge after pt_bicg_maxiter restarts, each with pt_bicg_maxiter 
    iterations, laser propagator will fall back to a (much slower) explicit solver
    in LAPACK (cgesv/zgesv/quad_zgesv, depending on the build precision).

  CAP_NAME='manolopoulos' (cap_tools.f90)
    Complex absorbing potential, applied near the outer boundary of the radial
    grid. The two possible choices are:
      'manolopoulos' - Transmission-free absorber of D.E. Manolopoulos, 
                       see: JCP 117, 90552 (2002)
      'none'         - Do not apply the absorbing potential (reflecting outer boundary)

  CAP_PARAM=(0.2,0.2) (cap_tools.f90)
    Additional parameters specifying the absorber. The meaning depends on the 
    choice of CAP_NAME. For CAP_NAME='manolopoulos', the values are:
      CAP_PARAM(1) is kmin, the lowest momentum to be absorbed with the guaranteed
                   efficiency. All higher momenta will be absorbed more efficiently.
                   Smaller values of kmin result in thicker absorbing boundary.
      CAP_PARAM(2) is delta, the JWKB scaling parameter. The default is 0.2, 
                   corresponding to 1% reflection probability for k=kmin. Smaller
                   values of delta decrease the reflection probability, at the cost
                   of a thicker absorbing boundary. For further discussion of the
                   kmin and delta parameters, see the original publication.
    The value of CAP_PARAM is ignored for CAP_NAME='none'.
    
  COMMENT=' ' (spherical_tdse.f90)
    A brief description of the input; will be copied close to the top of the
    output file, but is otherwise ignored.

  COMPOSITION_THRESHOLD=1e-4 (spherical_tdse.f90)
    Threshold for reporting the field-free amplitudes of the field-free
    solutions in the final wavefunction. Set to a negative number to disable 
    composition analysis. Composition analysis requires diagonalization of
    (SD_LMAX+1) dense non-Hermitian matrices of dimension (SD_NRADIAL,SD_NRADIAL),
    which can be expensive. For repeated runs with the same grid and Hamiltonian
    choice, these atomic solutions can be cached, see WT_ATOMIC_CACHE_PREFIX.
    The actual analysis is performed in wavefunction_tools.f90

  DETAIL_OUTPUT='detail.table' (spherical_tdse.f90)
    A more detailed output from the simulation, mostly intended for computer
    post-processing. The output contains time, vector-potential, wavefunction
    norm, expectation of the Hamiltonian (with and without the CAP), 
    expectation of the dipole moment operator and dipole acceleration. 
    (Note that calculation of dipole acceleration requires atomic potential 
    to be multiplicative. Some of the terms needed to evaluate dipole
    acceleration in the presence of a non-multiplicative potential are not
    currently impelemented.)
    Setting DETAIL_OUTPUT=' ' suppresses the output.

  DT=0.01 (spherical_tdse.f90)
    Time step, in atomic units of time (1fs \approx 41.34137 au[t]). The 
    appropriate choice of the time step is highly problem-dependent.
    Generally, dense and non-uniform radial grids require small time steps.
    So so large angular momenta, large vector-potential amplitudes, and 
    fields with rapidly-varying vector-potential direction. See Section
    4 and examples above for some hints on choosing the time step.

  FIELD_PREVIEW='field.table' (spherical_tdse.f90)
    Reports the laser field used in the simulation, before simulation
    actually starts. Useful for debugging pulse shapes. For each time
    step, the output contains the time, vector potential (spherical
    coordinates) and electric field (Cartesian coordinates). To suppress
    the output, use FIELD_PREVIEW=' '.

  FIELD_UNWRAP=.true. (spherical_tdse.f90)
    Attempts to make laser vector-potential smooth in time, minimizing
    rotation of the local reference frame. All simulations should still
    run correctly with FIELD_UNWRAP=.false., but may run (sometimes much)
    slower, and experience (slightly) larger numerical errors.

  FINAL_WF_DUMP_PREFIX=' ' (spherical_tdse.f90)
    At the end of the simulation, save the wavefunction in ASCII files with
    L and M labels appended to the prefix specified by FINAL_WF_DUMP_PREFIX.
    See routine dump_wavefunctions() in spherical_tdse.f90 for more details.
    FINAL_WF_DUMP_PREFIX=' ' suppresses the output. This wavefunction can be
    read back in using INITIAL_WFN='read' (see below).

  INITIAL_WF_DUMP_PREFIX=' ' (spherical_tdse.f90)
    Save wavefunction before time propagation starts. See FINAL_WF_DUMP_PREFIX.

  INITIAL_WFN='atomic' (spherical_tdse.f90)
    Choice of the initial wavefunction for propagation. Can be one of:
      'random' - Start with a random wavefunction
      'unit'   - Start with a unit wavefunction
      'atomic' - Start with a field-free atomic solution; see INITIAL_WFN_INDEX
                 Uses full-matrix eigenvalue solver
      'single' - Start with a field-free atomic solution; see INITIAL_WFN_ENERGY
                 Uses inverse-iteration eigenvector solver
      'read'   - Read wavefunction from a file specified by INITIAL_WFN_FILE.
                 Files produced by FINAL_WF_DUMP_PREFIX= are accepted as input.

  INITIAL_WFN_FILE=' ' (spherical_tdse.f90)
    Required for INITIAL_WFN='read'. 
    
  INITIAL_WFN_INDEX=(/0,0,1/) (spherical_tdse.f90)
    Required for INITIAL_WFN='atomic' or 'single'. Specifies the initial atomic state:
      INITIAL_WFN_INDEX(1)=L angular momentum
      INITIAL_WFN_INDEX(2)=M angular momentum projection on the laboratory Z axis
      INITIAL_WFN_INDEX(3)=I sequential index within the (L,M) set; ground state is 1
    The sequential index is ignored for INITIAL_WFN='single'

  INITIAL_WFN_ENERGY=(-1.,0.) (spherical_tdse.f90)
    Specifies initial guess for the energy of the desired atomic eigenstate.

  OMP_NUM_THREADS=0 (spherical_tdse.f90)
    Sets the number of OpenMP threads. OMP_NUM_THREADS=0 lets OpenMP runtime decide
    on the number of threads.

  OUTPUT_EACH=100 (spherical_tdse.f90)
    Produce output on the standard output each (OUTPUT_EACH) time steps. The detailed
    output file (see DETAIL_OUTPUT) is not affected by this setting.
    
  POT_NAME='hydrogenic' (potential_tools.f90)
    Choice of the multiplicative potential in the atomic Hamiltonian. Can be one of:
      'hydrogenic' - (-Z)/r; Z=POT_PARAM(1); You should set SD_RGRID_ZETA to Z for 
                     optimal results as well.
      'harmonic'   - (1/2)*k*r**2; k=POT_PARAM(1); You should set SD_RGRID_ZETA to zero
                     for optimal results.
      'argon'      - Effective potential from H.G. Muller PRA 60, 1341 (1999), fit to
                     ionization energies of argon atom. Set SD_RGRID_ZETA to 18.
      'argon 2P'   - Valence-only effective potential for argon atom. This is NOT the
                     same as valence-only potential given in HGM. Set SD_RGRID_ZETA to 
                     zero for optimal results.
    See POT_PARAM below for the definition of parameters required by the potential.
    Also see SD_RGRID_ZETA, especially for the potentials containing a singularity at
    the origin.

  POT_PARAM=1. (potential_tools.f90)
    User-controllable parameters for the radial multiplicative potential.

  PT_CHUNK=1 (propagator_tools.f90)
    Size of OpenMP parallel chunk in the propagator loops. This is a performance-tuning
    parameter. See source code in propagator_tools.f90 for more details.

  PT_EPS_DT=-1. (propagator_tools.f90)
    Atomic propagator contains terms which depend on the time step, and are recomputed
    if the time step changes. PT_EPS_DT determines the maximum change in the time step
    before atomic propagator needs to be updated. Setting PT_EPS_DT=0. will force 
    atomic propagator update if the time step is not bit-for-bit identical to the
    cached value. PT_EPS_DT=-1. (which is the default) will tolerate changes in up
    to three last significant digits before recomputation occurs.

  PT_FORCE_PAR_L=.false. (propagator_tools.f90)
    Laser-field propagator can be parallelized either over angular momentum L, or over
    angular momentum projection M. L-parallel version has a higher parallelization 
    overhead, but is applicable to a larger number of cases. Normally, the propagator
    will choose the appropriate parallel version; by setting PT_FORCE_PAR_L=.TRUE., it
    is possible to force the use of the L-parallel version even when M-parallel code
    is expected to be more efficient. This is a performance tuning/debugging parameter.

  PT_MIX_SOLVER='default' (propagator_tools.f90)
    Part of the laser propagator involving coupling between the L=0 and L=1 sub-blocks
    requires solving a system of linear equations of the dimension (2*SD_NRADIAL). 
    The possible choices are:
      'default' = A synonym for 'SM'.
      'SM'      = Use tri-diagonal solver with Sherman-Morrison correction.
      'bi-CG'   = Use iterative bi-conjugate gradient solver, with a fallback to LAPACK.
                  This choice is also affected by BICG_EPSILON and BICG_MAXITER
      'lapack'  = Use dense lapack solver.
    'SM' is the fastest and the most accurate choice. 'bi-CG' is slower, but is still
    a linear-scaling choice. It may lose accuracy for single-precision calculations.
    'lapack' is quadratic in SD_NRADIAL, and offers no accuracy advantage over 'SM'.
    This is a debugging parameter. There should be no reason to use anything other 
    than 'default'

  PT_SENSE_REAL=.true. (propagator_tools.f90)
    The propagator will try to take advantage of the purely real time steps. By
    setting PT_SENSE_REAL=.false., it is possible to force use of the (slower) 
    general-case code throughout. This is a debugging parameter.

  ROTATION_MODE='auto' (spherical_tdse.f90)
    Chooses the code implementing the non-adiabatic (frame rotation) term in the
    Hamiltonian. Can be one of:
      'none'        - Use a fixed frame. Vector-potential must be along Z; other 
                      vector-potentials will be accepted, but (silently) produce 
                      incorrect results. Field-unwrapping is disabled (see FIELD_UNWRAP)
      'brute force' - Explicit finite-angle rotation, using full-matrix implementation 
                      through Wigner rotation matrices. This version is marginally
                      faster for small SD_LMAX values, but becomes numerically unstable 
                      for large angular momenta. It is intended primarily for debugging.
      'sparse'      - Small-angle rotation using sparse matrices. Large-angle rotations
                      are handled by breaking them up into small steps (see RT_MAX_ROT)
      'auto'        - Switches between 'none' and 'sparse' depending on the vector-
                      potential choice. This is the default.

  RT_BLOCKSIZE=16 (rotation_tools.f90)
    Number of radial grid points rotated simultaneously for ROTATION_MODE='sparse'. 
    This is a performance optimization parameter.

  RT_MAX_ROT=1e-2 (rotation_tools.f90)
    Controls the largest acceptable rotation angle for ROTATION_MODE='sparse'. When
    necessary, rotations will be broken into steps with rotation angles around any
    of the axes not exceeding RT_MAX_ROT/(SD_LMAX+1). The default setting 
    (RT_MAX_ROT=1e-2) should yield at least 10 significant digits for all rotations.

  RT_SENSE_REAL=.true. (rotation_tools.f90)
    For the ROTATION_MODE='sparse' case, uses faster code when rotation matrices 
    turn out to be real. RT_SENSE_REAL=.false. uses general-case code throughout.
    This is a debugging parameter.

  SD_LMAX=10 (spherical_data.f90)
    Largest angular momentum in the grid. Lowest angular momentum is always 0.
    Also see SD_MMAX.

  SD_MMAX=0 (spherical_data.f90)
    Largest angular momentum projection on the Z axis of the local (NOT the
    laboratory!) frame. The two recommended usage case are:
    a) Vector potential remains parallel to the laboratory Z axis, so that
       angular momentum projection is conserved:
         -SD_LMAX<=SD_MMIN=SD_MMAX<=SD_LMAX
    b) Arbitrary vector-potential:
         SD_MMIN=-SD_LMAX; SD_MMAX=SD_LMAX
    Other inputs will be accepted, but may lead to a norm non-conserving
    propagator.

  SD_MMIN=0 (spherical_data.f90)
    Smallest angular momentum projection on the Z axis of the local (NOT the
    laboratory!) frame. See SD_MMAX.

  SD_NRADIAL=220 (spherical_data.f90)
    Total number of points in the radial grid.

  SD_NSPIN=1 (spherical_data.f90)
    Number of spin components to consider. In the present version, thus must
    be one.

  SD_RGRID='uniform' (spherical_data.f90)
    Choice of the radial grid. Can be one of:
      'uniform'     - Uniformly distributed points.
      'log'         - Logarithmically distributed points.
      'log-uniform' - Logarithmic grid until step reaches sd_rgrid_dr;
                      uniform grid afterwards
      'read'        - Arbitrary user-defined points; uses rd_rgrid_file
    Depending on the choice of SD_RGRID, several additional parameters
    may need to be set to complete radial grid definition, including: 
    SD_RGRID_DR, SD_RGRID_R0, SD_RGRID_SCALE, SD_RGRID_NPAD, and SD_RGRID_FILE
    In most cases, SD_RGRID='log-uniform' yields the best balance between
    cost of propagation and accuracy of solutions.

    WARNING: Not all grids produced by sd_rgrid/='uniform' are of a good 
    quality. Watch out for rapid oscillations in the left wavefunctions: this 
    can (and does!) cause problems with the laser coupling operator later on.
    Well-behaved grids tend to look like nearly uniform locally, and avoid
    rapid changes in the grid point spacing. Grids containing abrupt changes
    in point density usually require small time steps to achieve stable 
    propagation in time.

  SD_RGRID_DR=0.2 (spherical_data.f90)
    Grid-point spacing of the uniform grid (SD_RGRID='uniform') or of the
    outer uniform segment of SD_RGRID='log-uniform'

  SD_RGRID_FILE='grid.dat' (spherical_data.f90)
    For SD_RGRID='read', contains list of (SD_NRADIAL+1) grid point 
    coordinates in Bohr, one grid point per line. The initial point 
    at R=0 is assumed implicitly; the last [(SD_NRADIAL+1)-th] entry
    of the list must give the end of the radial integration domain,
    rather than an actual grid point.

  SD_RGRID_NPAD=-1 (spherical_data.f90)
    Non-uniform grids generated by SD_RGRID='log' and 'log-uniform' add 
    a small uniform segment between the origin and the first point of the
    logarithmic progression. This is done to avoid a large change in
    grid spacing and consequent highly oscillatory terms in the 
    derivative operators. The number of padding points is specified by
    SD_RGRID_NPAD. The default value (SD_RGRID_NPAD=-1) will choose the
    number of padding poind to minimize the change in grid spacing at
    the junction point.

  SD_RGRID_R0=1e-2 (spherical_data.f90)
    For SD_RGRID='log' and 'log-uniform', the first point of the logarithmic
    progression. Subsequent point are given by:
      r(i) = SD_RGRID_R0 * SD_RGRID_SCALE**(i-1)

  SD_RGRID_SCALE=1.05 (spherical_data.f90)
    Scaling factor of the logarithmic progression; see SD_RGRID_R0

  SD_RGRID_ZETA=1.0 (spherical_data.f90)
    For Coulomb-like potential, the effective nuclear charge at the origin.
    This value is used to enforce the correct boundary conditions in the L=0
    channel. The value of SD_RGRID_ZETA can have a substantial effect on the
    overall accuracy of the calculation.

  SD_RGRID_GRAD_DELTA=0.01 (spherical_data.f90)
    Step-size control for numerical differential of the potential. 
    Gradient of the potential is needed for computing dipole acceleration.
    It is computed using symmetric numerical differentiation of the potential,
    with the displacements of SD_RGRID_GRAD_DELTA times the distance to the
    preceeding radial point within the grid.

  SKIP_TESTS=.false. (spherical_data.f90)
    The code attempts to validate quality of the radial grids by:
    a) comparing the accuracy of the radial derivatives of test functions
       to known analytical solutions; and
    b) by computing the eigenstates of the field-free Hamiltonian, and
       examining these eigenstates for rapid oscillations in the left
       eigenfunctions (this is the most common source of numerical
       instabilities in time propagation).
    These tests produce a considerable amount of output and, for the 
    second test, can become numerically expensive. Once you are confident
    that radial grid is appropriate for the field-free Hamiltonian, it is
    possible to reduce computational cost by setting SKIP_TESTS=.true.
    Please also see WT_ATOMIC_CACHE_PREFIX below.

  TASK='real time' (spherical_tdse.f90)
    Chooses computational task to perform. Can be one of:
      'real time'      - Real-time propagation of the initial wavefunction,
                         under the influence of the laser field.
      'imaginary time' - Imaginary-time propagation of the initial wavefunction.
                         This option is primarily intended for debugging; it is
                         usually much faster and more convenient to obtain atomic
                         solutions using dense linear algebra.

  TIMER_DISABLE=.false. (timer.f90)
    Set to .true. to disable all internal timing code. This should result in
    (normally slightly) faster execution. The default is to monitor execution
    times and number of calls to major sections of the code.

  TIMESTEPS=50000 (spherical_tdse.f90)
    Number of time steps to perform in the simulation.

  UNWRAP_THRESHOLD=1e-8 (spherical_tdse.f90)
    Do not try to unwrap vector potential at time steps when vector-potential
    magnitude is smaller than UNWRAP_THRESHOLD*maxval(abs(vp)). This helps to
    minimize spurious coordinate-system rotation.

  VERBOSE=2 (spherical_tdse.f90)
    Extent of output detail. Settings above 2 are primarily for debugging;
    the recommended range is between 0 and 2.

  VP_PARAM=0. (vectorpotential_tools.f90)
  VP_PARAM_X=0. (vectorpotential_tools.f90)
  VP_SCALE=0. (vectorpotential_tools.f90)
  VP_SCALE_X=0 (vectorpotential_tools.f90)

  VP_SHAPE=' ' (vectorpotential_tools.f90)
    Overall vector-potential shape. Combined with VP_SCALE, VP_PARAM, 
    VP_SCALE_X, and VP_PARAM_X, determines the shape of the laser field.
    Possible choices are:
      'z Gaussian'  - Linearly-polarized (almost-)Gaussian pulse along lab Z;
                      Pulse parameters from VP_SCALE/VP_PARAM
      'zy Gaussian' - Elliptically-polarized "Gaussian" pulse, ZY plane
                      Vector-potential along lab Z from VP_SCALE/VP_PARAM
                      Vector-potential along lab Y from VP_SCALE_X/VP_PARAM_X
      'xy Gaussian' - Similar to 'zy Gaussian', but in the XY plane
      'zy CW'       - Circularly polarized CW field in the XY plane.
                      VP_SCALE gives the magnitude, VP_PARAM(1) is the
                      (circular) frequency
      'z Sin2'      - Linearly-polarized along Z; Sin^2 vector-potential envelope.
                      Pulse parameters from VP_SCALE/VP_PARAM
      'z Flat-Sin2' - Linearly-polarized along Z; Flat-top vector-potential, with
                      Sin^2 raising/falling edges.
                      Pulse parameters from VP_SCALE/VP_PARAM
      'table'       - Special-purpose input; see source code in spherical_tdse.f90
    "Gaussian" pulses above have envelopes modified at the wings to have 
    finite duration. See code in GaussianVP() in vectorpotential_tools.f90 
    for further details. The parameters are (add _X for the secondary component):
      VP_SCALE     - overall vector potential magnitude
      VP_PARAM(1)  - Carrier circular frequency [atomic units]
      VP_PARAM(2)  - Carrier phase at pulse origin [radians]. VP_PARAM(2)=0 
                     corresponds to the cosine carrier phase.
      VP_PARAM(3)  - Pulse origin [atomic units]
      VP_PARAM(4)  - Full width at half power [atomic units]
      VP_PARAM(11) - Start of the envelope hard turn-off, relative to the 
                     origin [atomic units]
      VP_PARAM(12) - End of the envelope hard turn-off, relative to the 
                     origin [atomic units]. VP_PARAM(12)>VP_PARAM(11).
    "Sin2" pulses depend on the following parameters:
      VP_SCALE     - overall vector potential magnitude
      VP_PARAM(1)  - Carrier circular frequency [atomic units]
      VP_PARAM(2)  - Carrier phase at pulse origin [radians]. VP_PARAM(2)=0 
                     corresponds to the sine carrier phase.
      VP_PARAM(3)  - Pulse origin [atomic units]
      VP_PARAM(4)  - Full width at zero [atomic units]
    "Flat-Sin2" pulses take the same parameters as "Sin2", plus:
      VP_PARAM(11) - Duration of the raising/falling edges [atomic units]
    Also see FIELD_PREVIEW.

  WT_ATOMIC_CACHE_PREFIX=' ' (wavefunction_tools.f90)
    Field-free solutions of the atomic Hamiltonian are used for testing grid
    quality (see SKIP_TESTS above) and to analyze the final wavefunctions at
    the end of time propagation. These solutions are obtained by diagonalizing
    (SD_NRADIAL,SD_NRADIAL) sub-blocks of the field-free Hamiltonian, using
    dense linear-algebra routines from LAPACK (CGEEV/ZGEEV). The cost of obtaining
    the atomic solutions scales as O(SD_LMAX*SD_NRADIAL**3), and can become 
    substantial. If WT_ATOMIC_CACHE_PREFIX is set to a non-empty value, atomic
    solutions will be cached in files with '-L=nnn' appended to the value of
    WT_ATOMIC_CACHE_PREFIX. Cached atomic solutions are specific to a particular
    grid choice, compiler, and real kind choice. There is no checking; it is
    the user's responsibility to remove stale atomic solutions.

  WT_DISABLE_ORTHOGONALIZATION=.F. (wavefunction_tools.f90)
    This is a debugging parameter. Setting it to .FALSE. disables explicit
    re-orthogonalization of the eigenvectors of the atomic wavefunctions.

  WT_ITERATIVE_IMPROVEMENT=.T. (wavefunction_tools.f90)
    Field-free solutions of the atomic Hamiltonian will be improved using
    inverse iterations. Using iterative refinement approximately doubles the
    cost of computing the solutions, but greatly improves their accuracy.

  WT_MAX_SOLUTION_ITERATIONS=20 (wavefunction_tools.f90)
    Maximum number of passes used to find atomic eigenvectors using inverse
    iteration. Each pass involves five updates of the eigenvalue, each with
    three eigenvector updates.
